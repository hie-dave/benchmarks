@using Dave.Benchmarks.Core.Models.Entities
@model IEnumerable<IGrouping<DatasetGroup?, Dataset>>

@{
    ViewData["Title"] = "Dataset Explorer";
}

<div class="container-fluid">
    <h2 class="mb-4">Dataset Explorer</h2>

    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Datasets</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush dataset-tree">
                        @{
                            var ungroupedDatasets = Model.FirstOrDefault(g => g.Key == null);
                            if (ungroupedDatasets != null && ungroupedDatasets.Any())
                            {
                                foreach (var dataset in ungroupedDatasets)
                                {
                                    <div class="list-group-item dataset-item" data-dataset-id="@dataset.Id">
                                        <div class="form-check">
                                            <input class="form-check-input dataset-selector" type="radio" name="dataset" id="dataset-@dataset.Id" value="@dataset.Id">
                                            <label class="form-check-label" for="dataset-@dataset.Id">
                                                @dataset.Name
                                                <small class="text-muted d-block">@(dataset is PredictionDataset ? "Prediction" : "Observation")</small>
                                            </label>
                                        </div>
                                    </div>
                                }
                            }

                            foreach (var group in Model.Where(g => g.Key != null))
                            {
                                <div class="list-group-item dataset-group">
                                    <div class="d-flex align-items-center group-header mb-2">
                                        <i class="bi bi-folder me-2"></i>
                                        <span>@group.Key!.Name</span>
                                        <span class="badge bg-secondary ms-2">@group.Count()</span>
                                    </div>
                                    <div class="dataset-group-items ps-4">
                                        @foreach (var dataset in group)
                                        {
                                            <div class="dataset-item mb-2" data-dataset-id="@dataset.Id">
                                                <div class="form-check">
                                                    <input class="form-check-input dataset-selector" type="radio" name="dataset" id="dataset-@dataset.Id" value="@dataset.Id">
                                                    <label class="form-check-label" for="dataset-@dataset.Id">
                                                        @dataset.Name
                                                        <small class="text-muted d-block">@(dataset is PredictionDataset ? "Prediction" : "Observation")</small>
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div id="selectedDatasetDetails" class="d-none">
                    <hr class="my-0">
                    <div class="p-3">
                        <div class="selected-dataset-info mb-3">
                            <!-- Will be populated by JavaScript -->
                        </div>
                        <div class="form-group">
                            <label for="variableSelect" class="form-label">Select Variable</label>
                            <select class="form-select" id="variableSelect" disabled>
                                <option value="">Select a variable...</option>
                            </select>
                        </div>
                        <div class="mt-3 text-end">
                            <button class="btn btn-danger btn-sm delete-dataset" style="display: none;">
                                <i class="bi bi-trash"></i> Delete Dataset
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Data</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="dataTable" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Loading...</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Select a dataset and variable to view data</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete "<span id="deleteDatasetName"></span>"?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

    <style>
        .dataset-tree .dataset-group {
            background-color: #f8f9fa;
        }
        .dataset-tree .dataset-group-items {
            border-left: 2px solid #dee2e6;
        }
        .dataset-item:hover {
            background-color: #f8f9fa;
        }
        .dataset-group .group-header {
            cursor: pointer;
        }
        #selectedDatasetDetails {
            background-color: #f8f9fa;
        }
        .selected-dataset-info {
            font-size: 0.9rem;
        }
        #dataTable.processing tbody {
            opacity: 0.5;
        }
        #dataTable.processing tbody td {
            color: #6c757d;
        }
    </style>

    <script>
        $(document).ready(function() {
            let dataTable = null;

            function initializeDataTable(data) {
                console.log('Initializing DataTable with data:', {
                    isArray: Array.isArray(data),
                    length: data?.length,
                    firstItem: data?.[0],
                    allData: data
                });
                
                if (dataTable) {
                    console.log('Destroying existing DataTable');
                    dataTable.destroy();
                }

                if (!data || !data.length) {
                    console.log('No data provided, showing empty table');
                    dataTable = $('#dataTable').DataTable({
                        columns: [{ title: "Message", data: null }],
                        data: [{ Message: "No data available for this variable" }],
                        language: {
                            emptyTable: "No data available for this variable"
                        }
                    });
                    return;
                }

                // Get columns from the first data item
                const columns = Object.keys(data[0]).map(key => ({
                    title: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter
                    data: key,
                    render: function(data) {
                        if (data === null || data === undefined) return '';
                        
                        // Handle different data types appropriately
                        if (data instanceof Date || (typeof data === 'string' && !isNaN(Date.parse(data)))) {
                            return new Date(data).toLocaleString();
                        }
                        if (typeof data === 'number') {
                            return data.toLocaleString(undefined, { 
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 4 
                            });
                        }
                        return data.toString();
                    }
                }));

                console.log('Detected columns:', columns);

                // Initialize DataTable with the data
                dataTable = $('#dataTable').DataTable({
                    data: data,
                    columns: columns,
                    order: [[0, 'asc']],
                    pageLength: 25,
                    processing: true,
                    language: {
                        processing: "Loading data...",
                        emptyTable: "No data available for this variable"
                    }
                });

                console.log('DataTable initialized with', data.length, 'rows');
            }

            // Initialize with empty state
            initializeDataTable([]);

            // Handle dataset selection
            $('.dataset-selector').on('change', function() {
                const datasetId = $(this).val();
                console.log('Dataset selected:', datasetId);
                
                if (!datasetId) {
                    console.log('No dataset ID');
                    return;
                }

                const apiUrl = `/api/data/datasets/${datasetId}`;
                console.log('Fetching dataset details from:', apiUrl);

                // Load dataset details and variables
                $.get(apiUrl)
                    .done(function(dataset) {
                        console.log('Dataset loaded:', dataset);
                        
                        // Update dataset details
                        let detailsHtml = `
                            <div class="fw-bold">${dataset.name}</div>
                            <div class="text-muted small">${dataset.type === 'Prediction' ? 'Prediction Dataset' : 'Observation Dataset'}</div>
                            <div class="small mt-1">${dataset.description || ''}</div>
                            <div class="text-muted small mt-1">Created: ${new Date(dataset.createdAt).toLocaleString()}</div>
                        `;
                        $('.selected-dataset-info').html(detailsHtml);
                        
                        // Show the details section
                        $('#selectedDatasetDetails').removeClass('d-none');

                        // Update delete button
                        $('.delete-dataset')
                            .show()
                            .data('dataset-id', dataset.id)
                            .data('dataset-name', dataset.name);

                        // Update variable select
                        let variableSelect = $('#variableSelect');
                        variableSelect.empty().append('<option value="">Select a variable...</option>');
                        
                        if (dataset.variables && dataset.variables.length > 0) {
                            console.log('Loading variables:', dataset.variables);
                            dataset.variables.forEach(variable => {
                                variableSelect.append(`<option value="${variable.id}">${variable.name}</option>`);
                            });
                            variableSelect.prop('disabled', false);
                        } else {
                            console.log('No variables found in dataset');
                            variableSelect.prop('disabled', true);
                        }

                        // Reset table to empty state
                        initializeDataTable([]);
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Failed to load dataset:', textStatus, errorThrown);
                        alert('Failed to load dataset details. Please try again.');
                    });
            });

            // Handle variable selection
            $('#variableSelect').on('change', function() {
                const variableId = $(this).val();
                console.log('Variable selected:', variableId);
                
                if (!variableId) {
                    console.log('No variable ID');
                    initializeDataTable([]); // Reset table to empty state
                    return;
                }

                const datasetId = $('.dataset-selector:checked').val();
                console.log('Current dataset:', datasetId);
                
                const apiUrl = `/api/data/datasets/${datasetId}/variables/${variableId}/data`;
                console.log('Fetching variable data from:', apiUrl);

                // Show loading state in the table
                $('#dataTable').addClass('processing');
                if (dataTable) {
                    $('#dataTable').find('tbody').html('<tr><td colspan="100%" class="text-center">Loading data...</td></tr>');
                }

                // Load variable data
                $.get(apiUrl)
                    .done(function(data) {
                        console.log('Variable data loaded:', {
                            dataType: typeof data,
                            isArray: Array.isArray(data),
                            length: data?.length,
                            firstItem: data?.[0],
                            allData: data
                        });
                        
                        // Ensure data is an array
                        if (!Array.isArray(data)) {
                            console.error('Data is not an array:', data);
                            alert('Received invalid data format from server');
                            return;
                        }
                        
                        initializeDataTable(data);
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Failed to load variable data:', textStatus, errorThrown);
                        alert('Failed to load variable data. Please try again.');
                        initializeDataTable([]); // Reset table to empty state
                    })
                    .always(function() {
                        $('#dataTable').removeClass('processing');
                    });
            });

            // Handle group expansion
            $('.group-header').on('click', function() {
                $(this).closest('.dataset-group').find('.dataset-group-items').slideToggle();
            });

            // Handle dataset deletion
            $(document).on('click', '.delete-dataset', function() {
                const datasetId = $(this).data('dataset-id');
                const datasetName = $(this).data('dataset-name');
                $('#deleteDatasetName').text(datasetName);
                $('#confirmDelete').data('dataset-id', datasetId);
                $('#deleteConfirmModal').modal('show');
            });

            $('#confirmDelete').on('click', function() {
                const datasetId = $(this).data('dataset-id');
                $.ajax({
                    url: `/api/data/datasets/${datasetId}`,
                    method: 'DELETE',
                    success: function() {
                        location.reload();
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.error('Failed to delete dataset:', textStatus, errorThrown);
                        alert('Failed to delete dataset. Please try again.');
                    }
                });
            });

            // Log initial state
            console.log('Page loaded. Number of datasets:', $('.dataset-selector').length);
        });
    </script>
}
