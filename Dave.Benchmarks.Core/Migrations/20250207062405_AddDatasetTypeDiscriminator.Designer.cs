// <auto-generated />
using System;
using Dave.Benchmarks.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dave.Benchmarks.Core.Migrations
{
    [DbContext(typeof(BenchmarksDbContext))]
    [Migration("20250207062405_AddDatasetTypeDiscriminator")]
    partial class AddDatasetTypeDiscriminator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DatasetType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpatialResolution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TemporalResolution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Datasets");

                    b.HasDiscriminator<string>("DatasetType").HasValue("Dataset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.GridcellDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("VariableId", "LayerId", "Timestamp");

                    b.ToTable("GridcellData");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.PatchDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("PatchId")
                        .HasColumnType("int");

                    b.Property<int>("StandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("VariableId", "LayerId", "StandId", "PatchId", "Timestamp");

                    b.ToTable("PatchData");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.StandDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("StandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("VariableId", "LayerId", "StandId", "Timestamp");

                    b.ToTable("StandData");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.VariableLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariableId");

                    b.ToTable("VariableLayers");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.ObservationDataset", b =>
                {
                    b.HasBaseType("Dave.Benchmarks.Core.Models.Entities.Dataset");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Observation");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.PredictionDataset", b =>
                {
                    b.HasBaseType("Dave.Benchmarks.Core.Models.Entities.Dataset");

                    b.Property<string>("ClimateDataset")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InputDataSource")
                        .HasColumnType("longtext");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Patches")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasDiscriminator().HasValue("Prediction");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.GridcellDatum", b =>
                {
                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.VariableLayer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.Variable", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.PatchDatum", b =>
                {
                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.VariableLayer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.Variable", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.StandDatum", b =>
                {
                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.VariableLayer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.Variable", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.Variable", b =>
                {
                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.Dataset", "Dataset")
                        .WithMany("Variables")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.VariableLayer", b =>
                {
                    b.HasOne("Dave.Benchmarks.Core.Models.Entities.Variable", "Variable")
                        .WithMany("Layers")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.Dataset", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Dave.Benchmarks.Core.Models.Entities.Variable", b =>
                {
                    b.Navigation("Layers");
                });
#pragma warning restore 612, 618
        }
    }
}
